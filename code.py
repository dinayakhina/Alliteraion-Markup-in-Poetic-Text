poetic_text = "Свищет ветер, серебряный ветер, В шелковом шелесте снежного шума. В первый раз я в себе заметил — Так я еще никогда не думал. Пусть на окошках гнилая сырость, Я не жалею, и я не печален. Мне все равно эта жизнь полюбилась, Так полюбилась, как будто вначале. Взглянет ли женщина с тихой улыбкой — Я уж взволнован. Какие плечи! Тройка ль проскачет дорогой зыбкой — Я уже в ней и скачу далече. О, мое счастье и все удачи! Счастье людское землей любимо. Тот, кто хоть раз на земле заплачет, — Значит, удача промчалась мимо. Жить нужно легче, жить нужно проще, Все принимая, что есть на свете. Вот почему, обалдев, над рощей Свищет ветер, серебряный ветер."

import re

# "Транскрипция" текста, обозначение произносимых фонем буквами
def transcribe(instr):
    instr = instr.lower()

    tdict = {
        "тьс": "ц",
        "тс": "ц",
        "тц": "цц",
        "дц": "цц",
        "дс": "цц",
        "сш": "шш",
        "зж": "жж",
        "стн": "сн",
        "стл": "сл",
        "нтг": "нг",
        "здн": "зн",
        "здц": "зц",
        "ндц": "нц",
        "ндш": "нш",
        "гдт": "гт",
        "лнц": "нц"
    }

    for repstr in tdict:
        instr = instr.replace(repstr, tdict[repstr])

    vowels = re.sub(r"[^аеёиоуыэюя]", "", instr)
     

    instr = re.sub(r"([зс])([ндтс])([иеёьюя])", r"\1'\2\3", instr)
    instr = re.sub(r"н([ндтс])[иеёьюя]", r"н\1'", instr)
    instr = re.sub(r"[жс]ч", "щ'", instr)
    instr = re.sub(r"с([нтс])[иеёьюя]", r"с\1'", instr)
    instr = re.sub(r"([бвдзклмнпрстф])[иеёьюя]", r"\1'", instr)
    instr = re.sub(r"ж([ .,!),;:птфкцчшщ])", r"ш\1", instr)
    instr = re.sub(r"[зс]ь([ .,!),;:птфкцчшщ])", r"с'\1", instr)
    instr = re.sub(r"[зс]([ .,!),;:птфкцчшщ])", r"с\1", instr)
    instr = re.sub(r"[вф]ь([ .,!),;:птфкцчшщ])", r"ф'\1", instr)
    instr = re.sub(r"[вф]([ .,!),;:птфкцчшщ])", r"ф\1", instr)
    instr = re.sub(r"[дт]ь([ .,!),;:птфкцчшщ])", r"т'\1", instr)
    instr = re.sub(r"[дт]([ .,!),;:птфкцчшщ])", r"т\1", instr)
    instr = re.sub(r"[гк]ь([ .,!),;:птфкцчшщ])", r"к'\1", instr)
    instr = re.sub(r"[гк]([ .,!),;:птфкцчшщ])", r"к\1", instr)
    instr = re.sub(r"^[еёюя]", "й", instr)
    instr = re.sub(r"[ аоуыеёиэюяъь][еёюя]", "й", instr)
    instr = re.sub(r"'[еёюя]", "'й", instr)
    instr = re.sub(r"[аоуыеёиэюяъь]", "", instr)
    instr = re.sub(r"[^'\w\s]", "", instr)

    return instr, vowels

strans, vowels = transcribe(poetic_text)

added = re.findall(r"[бвгджзйклмнпрстфхцчшщ]'?", strans)

import pandas as pd

# Поиск соотношения согласных к количеству букв в тексте
len(re.sub(r"[' ]", "", strans))/(len(re.sub(r"[' ]", "", strans))+len(vowels))

# Занесение в словарь полученных Г. Кучерой данных о частотности фонем русского языка
og_dict = {'й': 4.1380, 'м': 2.3170, "м'": 0.8050, 'р': 2.9070, "р'": 1.3810, 'л': 2.6640, "л'": 2.0810, 'н': 4.1000, "н'": 2.2970, 'ч': 1.6330, 'ц': 0.5620, 'х': 0.9870, 'ш': 1.5630, 'щ': 1.5630, "щ'": 1.5630, 'ж': 0.9510, 'к': 3.1750, "к'": 0.5340, 'г': 1.3040, 'п': 2.3090, "п'": 0.4750, 'б': 1.0960, "б'": 0.3680, 'ф': 0.9470, "ф'": 0.0590, 'в': 2.9780, "в'": 1.0160, 'т': 4.2660, "т'": 1.8850, 'д': 1.6650, "д'": 1.0390, 'с': 3.0930, "с'": 1.8630, 'з': 1.3670, "з'": 0.3220}

# Подсчет частотности фонем в изучаемом тексте
new_text_frequency = 0
s_dict ={}

import collections
counted = collections.Counter(added)
dict_counted = dict(counted)


for key in dict_counted:
  s_dict[key] = (dict_counted[key]*100)/len(re.sub(r"[' ]", "", strans))


dframe = pd.DataFrame({"frequency": [(dict_counted[key]*100)/len(re.sub(r"[' ]", "", strans)) for key in dict_counted]})
dframe.index = list(dict_counted)
dframe.to_csv("dframe.csv")

dframe = dframe.sort_values(by='frequency', ascending=False)


# Неудачная попытка определить аллитерацию при помощи нахождения статистических выбросов. 

# Несмотря на то, что таким образом в частных случаях можно определить аллитерацию одной-двух наиболее частотных фонем, 
# мы не сможем получить результата при анализе произведения со множеством повторяемых звуков

#import numpy as np
#q1, q3 = np.percentile(dframe,[25,75])

#iqr = q3 - q1
#lower_bound = q1 - (1.5 * iqr) 
#upper_bound = q3 + (1.5 * iqr) 


print(q1,q3, lower_bound, upper_bound)

# Сравнение частотностей фонем. Выявление фонем, чья частотность в изучаемом произведении превышает их среднюю частотность в русском языке
for key in s_dict:
  if s_dict[key] > og_dict[key]:
     print(key)

# Частота полученных фонем в изучаемом тексте превосходит среднюю частоту этих же фонем в русскоям языке (по данным Г. Кучеры). 
# Вероятно, данный факт обусловен использованием автором приема аллитерации в данном поэтическом произведении.
